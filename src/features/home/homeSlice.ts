import { createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import { RootState } from "../../app/store"
import { getProducts } from "./homeAPI"

// export interface CounterState {
//   value: number
//   status: "idle" | "loading" | "failed"
// }

const initialState = {
  products: [],
  status: "idle",
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getProductsAsync = createAsyncThunk(
  "home/getProducts",
  async () => {
    const response = await getProducts()
    // The value we return becomes the `fulfilled` action payload
    return response.data
  },
)

export const counterSlice = createSlice({
  name: "home",
  initialState,
  reducers: {
    remain: (state) => {
      state.products = state.products
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getProductsAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(getProductsAsync.fulfilled, (state, action) => {
        state.status = "idle"
        state.products = action.payload
      })
      .addCase(getProductsAsync.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { remain } = counterSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const homeSelector = (state: RootState) => state

export default counterSlice.reducer

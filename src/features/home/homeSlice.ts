import { createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import { RootState } from "../../app/store"
import { exportProducts, getProducts } from "./homeAPI"
import { addProducts } from "./homeAPI"

// export interface CounterState {
//   value: number
//   status: "idle" | "loading" | "failed"
// }

const currentDate = new Date()
// Subtract 3 hours
const threeHoursAgo = new Date(currentDate.getTime() - 3 * 60 * 60 * 1000)

const initialState = {
  products: [],
  status: "idle",
  shouldReload: false,
  history: [
    {
      createdTime: new Date(currentDate.getTime() - 3 * 60 * 60 * 1000),
      action: "Nhập hàng",
      products: [
        {
          name: "Iphone 14",
          count: 2,
        },
        {
          name: "Iphone 13",
          count: 2,
        },
      ],
    },
    {
      createdTime: new Date(currentDate.getTime() - 0.7 * 60 * 60 * 1000),
      action: "Xuất hàng",
      products: [
        {
          name: "Iphone 14",
          count: 2,
        },
        {
          name: "Iphone 13",
          count: 2,
        },
      ],
    },
  ],
  historyInventory: [
    {
      createdTime: new Date(currentDate.getTime() - 2.3 * 60 * 60 * 1000),
      products_scanned: [
        {
          name: "Iphone 14",
          count: 2,
        },
        {
          name: "Iphone 13",
          count: 2,
        },
      ],
      products_lack: [],
    },
    {
      createdTime: new Date(currentDate.getTime() - 1.3 * 60 * 60 * 1000),
      products_scanned: [
        {
          name: "Iphone 14",
          count: 2,
        },
      ],
      products_lack: [
        {
          name: "Iphone 13",
          count: 2,
        },
      ],
    },
  ],
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getProductsAsync = createAsyncThunk(
  "home/getProducts",
  async () => {
    const response = await getProducts()
    // The value we return becomes the `fulfilled` action payload
    return response.data.data
  },
)

export const addProductsAsync = createAsyncThunk(
  "home/addProducts",
  async (data) => {
    await addProducts(data)
    // The value we return becomes the `fulfilled` action payload
  },
)

export const exportProductsAsync = createAsyncThunk(
  "home/exportProducts",
  async (data) => {
    await exportProducts(data)
    // The value we return becomes the `fulfilled` action payload
  },
)

export const counterSlice = createSlice({
  name: "home",
  initialState,
  reducers: {
    remain: (state) => {
      state.products = state.products
    },
    createInventory: (state, action) => {
      const a1 = action.payload.exportProducts.map((item) => {
        return {
          name: item.category_name,
          count: item.count,
        }
      })
      const a2 = action.payload.lackProducts.map((item) => {
        return {
          name: item.category_name,
          count: item.count,
        }
      })
      const a3 = {
        createdTime: Date.now(),
        products_scanned: a1,
        products_lack: a2,
      }
      state.historyInventory = [a3, ...state.historyInventory]
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getProductsAsync.pending, (state) => {
        state.status = "loading"
        state.shouldReload = false
      })
      .addCase(getProductsAsync.fulfilled, (state, action) => {
        state.status = "idle"
        state.products = action.payload
      })
      .addCase(getProductsAsync.rejected, (state) => {
        state.status = "failed"
      })
      // .addCase(addProductsAsync.pending, (state, action) => {
      //   const a = {
      //     createdTime: Date.now(),
      //     action: "Nhập hàng",
      //     products: [
      //       {
      //         name: action.payload.category_name,
      //         count: action.payload.UID.length,
      //       },
      //     ],
      //   }
      //   state.history = [a, ...state.history]
      //   state.shouldReload = true
      // })
      .addCase(addProductsAsync.fulfilled, (state, action) => {
        state.shouldReload = true
      })
      // .addCase(exportProductsAsync.pending, (state, action) => {
      //   const b = action.payload.a.map((item) => {
      //     return {
      //       name: item.category_name,
      //       count: item.count,
      //     }
      //   })
      //   state.history = [...b, ...state.history]
      //   state.shouldReload = true
      // })
      .addCase(exportProductsAsync.fulfilled, (state, action) => {
        state.shouldReload = true
      })
  },
})

export const { remain, createInventory } = counterSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const homeSelector = (state: RootState) => state

export default counterSlice.reducer
